
/*
  The PS2 keyboard output is pretty complicated.  It needs to be so in order to
  be used in a general-purpose computer, and the general purpose computer has
  dedicated hardware to translate this complicated code into something useful
  to applications.  This translator provides that kind of thing to the Arduino.
  It translates the keycodes into a made-up, but at least predictable, coding.
  
*/
#pragma once
#include "ps2_KeyboardOutput.h"

namespace ps2
{
	enum KeyCode : uint16_t {
		PS2_NONE = 0x0,

		/* Flags/bit masks for status bits in returned unsigned int value */
		PS2_SHIFT   = 0x4000,
		PS2_CTRL    = 0x2000,
		PS2_ALT      = 0x800,
		PS2_GUI      = 0x200,

		PS2_MODIFIERS = 0xff00,

		/* Returned keycode definitions */
		/* Do NOT change these codings as you will break base
		functionality use PS2KeyMap for that and internationalisation */
        PS2_KEY_NUM         = 0x01,
        PS2_KEY_SCROLL      = 0x02,
        PS2_KEY_CAPS        = 0x03,
        PS2_KEY_PRTSCR      = 0x04,
        PS2_KEY_PAUSE       = 0x05,
        PS2_KEY_L_SHIFT     = 0x06,
        PS2_KEY_R_SHIFT     = 0x07,
        PS2_KEY_L_CTRL      = 0x08,
        PS2_KEY_R_CTRL      = 0x09,
        PS2_KEY_L_ALT       = 0x0A,
        PS2_KEY_R_ALT       = 0x0B,
		/* Sometimes called windows key */
        PS2_KEY_L_GUI       = 0x0C,
        PS2_KEY_R_GUI       = 0x0D,
        PS2_KEY_MENU        = 0x0E,
		/* Break is CTRL + PAUSE generated inside keyboard */
        PS2_KEY_BREAK       = 0x0F,
		/* Generated by some keyboards by ALT and PRTSCR */
        PS2_KEY_SYSRQ       = 0x10,
        PS2_KEY_HOME        = 0x11,
        PS2_KEY_END         = 0x12,
        PS2_KEY_PGUP        = 0x13,
        PS2_KEY_PGDN        = 0x14,
        PS2_KEY_L_ARROW     = 0x15,
        PS2_KEY_R_ARROW     = 0x16,
        PS2_KEY_UP_ARROW    = 0x17,
        PS2_KEY_DN_ARROW    = 0x18,
        PS2_KEY_INSERT      = 0x19,
        PS2_KEY_DELETE      = 0x1A,
        PS2_KEY_ESC         = 0x1B,
        PS2_KEY_BS          = 0x1C,
        PS2_KEY_TAB         = 0x1D,
        PS2_KEY_ENTER       = 0x1E,
        PS2_KEY_SPACE       = 0x1F,
        PS2_KEY_KP0         = 0x20,
        PS2_KEY_KP1         = 0x21,
        PS2_KEY_KP2         = 0x22,
        PS2_KEY_KP3         = 0x23,
        PS2_KEY_KP4         = 0x24,
        PS2_KEY_KP5         = 0x25,
        PS2_KEY_KP6         = 0x26,
        PS2_KEY_KP7         = 0x27,
        PS2_KEY_KP8         = 0x28,
        PS2_KEY_KP9         = 0x29,
        PS2_KEY_KP_DOT      = 0x2A,
        PS2_KEY_KP_ENTER    = 0x2B,
        PS2_KEY_KP_PLUS     = 0x2C,
        PS2_KEY_KP_MINUS    = 0x2D,
        PS2_KEY_KP_TIMES    = 0x2E,
        PS2_KEY_KP_DIV      = 0x2F,
        PS2_KEY_0           = 0x30,
        PS2_KEY_1           = 0x31,
        PS2_KEY_2           = 0x32,
        PS2_KEY_3           = 0x33,
        PS2_KEY_4           = 0x34,
        PS2_KEY_5           = 0x35,
        PS2_KEY_6           = 0x36,
        PS2_KEY_7           = 0x37,
        PS2_KEY_8           = 0x38,
        PS2_KEY_9           = 0x39,
        PS2_KEY_APOS        = 0x3A,
        PS2_KEY_COMMA       = 0x3B,
        PS2_KEY_MINUS       = 0x3C,
        PS2_KEY_DOT         = 0x3D,
        PS2_KEY_DIV         = 0x3E,
		/* Some Numeric keyboards have an '=' on right keypad */
        PS2_KEY_KP_EQUAL    = 0x3F,
		/* Single quote or back quote */
        PS2_KEY_SINGLE      = 0x40,
        PS2_KEY_A           = 0x41,
        PS2_KEY_B           = 0x42,
        PS2_KEY_C           = 0x43,
        PS2_KEY_D           = 0x44,
        PS2_KEY_E           = 0x45,
        PS2_KEY_F           = 0x46,
        PS2_KEY_G           = 0x47,
        PS2_KEY_H           = 0x48,
        PS2_KEY_I           = 0x49,
        PS2_KEY_J           = 0x4A,
        PS2_KEY_K           = 0x4B,
        PS2_KEY_L           = 0x4C,
        PS2_KEY_M           = 0x4D,
        PS2_KEY_N           = 0x4E,
        PS2_KEY_O           = 0x4F,
        PS2_KEY_P           = 0x50,
        PS2_KEY_Q           = 0x51,
        PS2_KEY_R           = 0x52,
        PS2_KEY_S           = 0x53,
        PS2_KEY_T           = 0x54,
        PS2_KEY_U           = 0x55,
        PS2_KEY_V           = 0x56,
        PS2_KEY_W           = 0x57,
        PS2_KEY_X           = 0x58,
        PS2_KEY_Y           = 0x59,
        PS2_KEY_Z           = 0x5A,
        PS2_KEY_SEMI        = 0x5B,
        PS2_KEY_BACK        = 0x5C,
        PS2_KEY_OPEN_SQ     = 0x5D,
        PS2_KEY_CLOSE_SQ    = 0x5E,
        PS2_KEY_EQUAL       = 0x5F,
		/* Some Numeric keypads have a comma key */
        PS2_KEY_KP_COMMA    = 0x60,
        PS2_KEY_F1          = 0x61,
        PS2_KEY_F2          = 0x62,
        PS2_KEY_F3          = 0x63,
        PS2_KEY_F4          = 0x64,
        PS2_KEY_F5          = 0x65,
        PS2_KEY_F6          = 0x66,
        PS2_KEY_F7          = 0x67,
        PS2_KEY_F8          = 0x68,
        PS2_KEY_F9          = 0x69,
        PS2_KEY_F10         = 0x6A,
        PS2_KEY_F11         = 0x6B,
        PS2_KEY_F12         = 0x6C,
        PS2_KEY_F13         = 0x6D,
        PS2_KEY_F14         = 0x6E,
        PS2_KEY_F15         = 0x6F,
        PS2_KEY_F16         = 0x70,
        PS2_KEY_F17         = 0x71,
        PS2_KEY_F18         = 0x72,
        PS2_KEY_F19         = 0x73,
        PS2_KEY_F20         = 0x74,
        PS2_KEY_F21         = 0x75,
        PS2_KEY_F22         = 0x76,
        PS2_KEY_F23         = 0x77,
        PS2_KEY_F24         = 0x78,
        PS2_KEY_NEXT_TR     = 0x79,
        PS2_KEY_PREV_TR     = 0x7A,
        PS2_KEY_STOP        = 0x7B,
        PS2_KEY_PLAY        = 0x7C,
        PS2_KEY_MUTE        = 0x7D,
        PS2_KEY_VOL_UP      = 0x7E,
        PS2_KEY_VOL_DN      = 0x7F,
        PS2_KEY_MEDIA       = 0x80,
        PS2_KEY_EMAIL       = 0x81,
        PS2_KEY_CALC        = 0x82,
        PS2_KEY_COMPUTER    = 0x83,
        PS2_KEY_WEB_SEARCH  = 0x84,
        PS2_KEY_WEB_HOME    = 0x85,
        PS2_KEY_WEB_BACK    = 0x86,
        PS2_KEY_WEB_FORWARD = 0x87,
        PS2_KEY_WEB_STOP    = 0x88,
        PS2_KEY_WEB_REFRESH = 0x89,
        PS2_KEY_WEB_FAVOR   = 0x8A,
        PS2_KEY_EUROPE2     = 0x8B,
        PS2_KEY_POWER       = 0x8C,
        PS2_KEY_SLEEP       = 0x8D,
        PS2_KEY_WAKE        = 0x90,
        PS2_KEY_INTL1       = 0x91,
        PS2_KEY_INTL2       = 0x92,
        PS2_KEY_INTL3       = 0x93,
        PS2_KEY_INTL4       = 0x94,
        PS2_KEY_INTL5       = 0x95,
        PS2_KEY_LANG1       = 0x96,
        PS2_KEY_LANG2       = 0x97,
        PS2_KEY_LANG3       = 0x98,
        PS2_KEY_LANG4       = 0x99,
        PS2_KEY_LANG5       = 0xA0,
	};
	KeyCode operator |(KeyCode code, KeyCode modifiers) { return (KeyCode)((uint16_t)code | (uint16_t)modifiers); }
	KeyCode operator &(KeyCode code, KeyCode modifiers) { return (KeyCode)((uint16_t)code & (uint16_t)modifiers); }
	KeyCode &operator |=(KeyCode &code, KeyCode modifiers) { return code = (KeyCode)((uint16_t)code | (uint16_t)modifiers); }
	KeyCode &operator &=(KeyCode &code, KeyCode modifiers) { return code = (KeyCode)((uint16_t)code & (uint16_t)modifiers); }
	KeyCode operator ~(KeyCode code) { return (KeyCode)(~(uint16_t)code); }

	class NullKeyboardOutputSource {
	public:
		KeyboardOutput operator()() { return KeyboardOutput::none; }
	};

	template <typename KeyboardOutputSource = NullKeyboardOutputSource>
	class NeutralTranslator {
		bool isUnmake : 1;
		bool isExtended : 1;
		bool isExtended1 : 1;
		bool haveGotExtended1FirstByte : 1;
		KeyCode lastKeyDown;
		KeyboardOutputSource *source;

	public:
		NeutralTranslator(KeyboardOutputSource &source) {
			this->source = &source;
		}

		NeutralTranslator() {
			this->source = nullptr;
		}

		/**
		 * If a scancode is read from the PS2 interface itself, it should be sent here.
		 */
		void processPs2Keycode(KeyboardOutput code) {
			if (code == KeyboardOutput::none) {
				return;
			}
			if (code == KeyboardOutput::unmake) {
				this->isUnmake = true;
				return;
			}
			if (code == KeyboardOutput::extend) {
				this->isExtended = true;
				return;
			}
			if (code == KeyboardOutput::extend1) {
				this->isExtended1 = true;
				return;
			}

			if (this->isExtended1) {
				if (!this->haveGotExtended1FirstByte) {
					this->haveGotExtended1FirstByte = true;
					// Don't care about the actual content of the thing, because, oddly, there's only one
					//   key that uses Extended-1 mode
					return;
				}
				if (!this->isUnmake) {
					this->lastKeyDown = KeyCode::PS2_KEY_BREAK;
				}
				this->reset();
				return;
			}

			KeyCode modifier = this->translateModifier(code);
			if (modifier != KeyCode::PS2_NONE) {
				if (this->isUnmake) {
					this->lastKeyDown &= ~modifier;
				}
				else {
					this->lastKeyDown |= modifier;
				}
				this->reset();
				return;
			}

			if (this->isUnmake) {
				if (this->isExtended1 && !this->haveGotExtended1FirstByte) {
					this->haveGotExtended1FirstByte = true;
				}
				else {
					this->reset();
				}
				// Don't care about unmake
				return;
			}

			if (this->isExtended) {
				KeyCode translatedCode = translateExtended(code);
				if (translatedCode != PS2_NONE) {
					this->lastKeyDown = (this->lastKeyDown & KeyCode::PS2_MODIFIERS) | translatedCode;
				}
			}
			else {
				KeyCode translatedCode = translateNonExtended(code);
				if (translatedCode != PS2_NONE) {
					this->lastKeyDown = (this->lastKeyDown & KeyCode::PS2_MODIFIERS) | translatedCode;
				}
			}

			this->isUnmake = false;
			this->isExtended = false;
			this->isExtended1 = false;
		}

		void reset()
		{
			this->isUnmake = false;
			this->isExtended = false;
			this->isExtended1 = false;
			this->haveGotExtended1FirstByte = false;
		}

		/**
		 *  If a key has been pressed down sice the last time this method was read, this will return it.
		 *  Otherwise it returns KeyCode::PS2_NONE
		 */
		KeyCode readKeypress()
		{
			// Clear anything in our source buffer first:
			KeyboardOutput scanCode;
			while (KeyboardOutput::none != (scanCode = (*this->source)())) {
				this->processPs2Keycode(scanCode);
			}

			if (this->lastKeyDown & ~KeyCode::PS2_MODIFIERS) {
				KeyCode existingKey = this->lastKeyDown;
				// Clear it for the next time...
				this->lastKeyDown = this->lastKeyDown & KeyCode::PS2_MODIFIERS;

				// Print-Screen always comes across as shift-print-screen
				if (existingKey == (KeyCode::PS2_SHIFT | KeyCode::PS2_KEY_PRTSCR)) {
					existingKey = KeyCode::PS2_KEY_PRTSCR;
				}

				return existingKey;
			}
			else {
				// Nothing but modifiers are down
				return KeyCode::PS2_NONE;
			}
		}

#if false
		// Is this useful?  I think not - it would add a lot of complexity, and the
		// consumers of this class are aiming for something simple.  If we did
		// somothing like this, it should be its own class.

		/**
		 *  Returns true if there's something to read
		 */
		bool hasStateChanged();

		/*
		 *  Reads all the keys that are currently pressed.
		 *
		 *  Inputs:
		 *   buffer - This will be filled in with the keys that are down
		 *   szBuffer - the number of entries in the KeyCode array that buffer describes
		 *
		 *  Outputs:
		 *   The actual number of keys that are recorded as pressed down right now.  This can
		 *   be greater than szBuffer.
		 */
		int readDownKeys(KeyCode *buffer, unsigned int szBuffer);
#endif

	private:
		KeyCode translateModifier(KeyboardOutput inputCode)
		{
			switch (inputCode) {
				case KeyboardOutput::sc2_L_SHIFT: return KeyCode::PS2_SHIFT;
				case KeyboardOutput::sc2_R_SHIFT: return KeyCode::PS2_SHIFT;
				case KeyboardOutput::sc2_CTRL: return KeyCode::PS2_CTRL;
				case KeyboardOutput::sc2_ALT: return KeyCode::PS2_ALT;
				case KeyboardOutput::sc2_L_GUI: return KeyCode::PS2_GUI;
				case KeyboardOutput::sc2_R_GUI: return KeyCode::PS2_GUI;
				default: return KeyCode::PS2_NONE;
			}
		}

		KeyCode translateNonExtended(KeyboardOutput inputCode)
		{
			// This switch statements might make a bad bargain - they trade
			//  time-efficiency for program size.
			switch (inputCode) {
				case KeyboardOutput::sc2_NUM: return KeyCode::PS2_KEY_NUM;
				case KeyboardOutput::sc2_SCROLL: return KeyCode::PS2_KEY_SCROLL;
				case KeyboardOutput::sc2_CAPS: return KeyCode::PS2_KEY_CAPS;
				case KeyboardOutput::sc2_L_SHIFT: return KeyCode::PS2_KEY_L_SHIFT;
				case KeyboardOutput::sc2_R_SHIFT: return KeyCode::PS2_KEY_R_SHIFT;
				case KeyboardOutput::sc2_CTRL: return KeyCode::PS2_KEY_L_CTRL;
				case KeyboardOutput::sc2_ALT: return KeyCode::PS2_KEY_L_ALT;
				case KeyboardOutput::sc2_SYSRQ: return KeyCode::PS2_KEY_SYSRQ;
				case KeyboardOutput::sc2_ESC: return KeyCode::PS2_KEY_ESC;
				case KeyboardOutput::sc2_BS: return KeyCode::PS2_KEY_BS;
				case KeyboardOutput::sc2_TAB: return KeyCode::PS2_KEY_TAB;
				case KeyboardOutput::sc2_ENTER: return KeyCode::PS2_KEY_ENTER;
				case KeyboardOutput::sc2_SPACE: return KeyCode::PS2_KEY_SPACE;
				case KeyboardOutput::sc2_KP0: return KeyCode::PS2_KEY_KP0;
				case KeyboardOutput::sc2_KP1: return KeyCode::PS2_KEY_KP1;
				case KeyboardOutput::sc2_KP2: return KeyCode::PS2_KEY_KP2;
				case KeyboardOutput::sc2_KP3: return KeyCode::PS2_KEY_KP3;
				case KeyboardOutput::sc2_KP4: return KeyCode::PS2_KEY_KP4;
				case KeyboardOutput::sc2_KP5: return KeyCode::PS2_KEY_KP5;
				case KeyboardOutput::sc2_KP6: return KeyCode::PS2_KEY_KP6;
				case KeyboardOutput::sc2_KP7: return KeyCode::PS2_KEY_KP7;
				case KeyboardOutput::sc2_KP8: return KeyCode::PS2_KEY_KP8;
				case KeyboardOutput::sc2_KP9: return KeyCode::PS2_KEY_KP9;
				case KeyboardOutput::sc2_KP_DOT: return KeyCode::PS2_KEY_KP_DOT;
				case KeyboardOutput::sc2_KP_PLUS: return KeyCode::PS2_KEY_KP_PLUS;
				case KeyboardOutput::sc2_KP_MINUS: return KeyCode::PS2_KEY_KP_MINUS;
				case KeyboardOutput::sc2_KP_TIMES: return KeyCode::PS2_KEY_KP_TIMES;
				case KeyboardOutput::sc2_KP_EQUAL: return KeyCode::PS2_KEY_KP_EQUAL;
				case KeyboardOutput::sc2_0: return KeyCode::PS2_KEY_0;
				case KeyboardOutput::sc2_1: return KeyCode::PS2_KEY_1;
				case KeyboardOutput::sc2_2: return KeyCode::PS2_KEY_2;
				case KeyboardOutput::sc2_3: return KeyCode::PS2_KEY_3;
				case KeyboardOutput::sc2_4: return KeyCode::PS2_KEY_4;
				case KeyboardOutput::sc2_5: return KeyCode::PS2_KEY_5;
				case KeyboardOutput::sc2_6: return KeyCode::PS2_KEY_6;
				case KeyboardOutput::sc2_7: return KeyCode::PS2_KEY_7;
				case KeyboardOutput::sc2_8: return KeyCode::PS2_KEY_8;
				case KeyboardOutput::sc2_9: return KeyCode::PS2_KEY_9;
				case KeyboardOutput::sc2_APOS: return KeyCode::PS2_KEY_APOS;
				case KeyboardOutput::sc2_COMMA: return KeyCode::PS2_KEY_COMMA;
				case KeyboardOutput::sc2_MINUS: return KeyCode::PS2_KEY_MINUS;
				case KeyboardOutput::sc2_DOT: return KeyCode::PS2_KEY_DOT;
				case KeyboardOutput::sc2_DIV: return KeyCode::PS2_KEY_DIV;
				case KeyboardOutput::sc2_SINGLE: return KeyCode::PS2_KEY_SINGLE;
				case KeyboardOutput::sc2_A: return KeyCode::PS2_KEY_A;
				case KeyboardOutput::sc2_B: return KeyCode::PS2_KEY_B;
				case KeyboardOutput::sc2_C: return KeyCode::PS2_KEY_C;
				case KeyboardOutput::sc2_D: return KeyCode::PS2_KEY_D;
				case KeyboardOutput::sc2_E: return KeyCode::PS2_KEY_E;
				case KeyboardOutput::sc2_F: return KeyCode::PS2_KEY_F;
				case KeyboardOutput::sc2_G: return KeyCode::PS2_KEY_G;
				case KeyboardOutput::sc2_H: return KeyCode::PS2_KEY_H;
				case KeyboardOutput::sc2_I: return KeyCode::PS2_KEY_I;
				case KeyboardOutput::sc2_J: return KeyCode::PS2_KEY_J;
				case KeyboardOutput::sc2_K: return KeyCode::PS2_KEY_K;
				case KeyboardOutput::sc2_L: return KeyCode::PS2_KEY_L;
				case KeyboardOutput::sc2_M: return KeyCode::PS2_KEY_M;
				case KeyboardOutput::sc2_N: return KeyCode::PS2_KEY_N;
				case KeyboardOutput::sc2_O: return KeyCode::PS2_KEY_O;
				case KeyboardOutput::sc2_P: return KeyCode::PS2_KEY_P;
				case KeyboardOutput::sc2_Q: return KeyCode::PS2_KEY_Q;
				case KeyboardOutput::sc2_R: return KeyCode::PS2_KEY_R;
				case KeyboardOutput::sc2_S: return KeyCode::PS2_KEY_S;
				case KeyboardOutput::sc2_T: return KeyCode::PS2_KEY_T;
				case KeyboardOutput::sc2_U: return KeyCode::PS2_KEY_U;
				case KeyboardOutput::sc2_V: return KeyCode::PS2_KEY_V;
				case KeyboardOutput::sc2_W: return KeyCode::PS2_KEY_W;
				case KeyboardOutput::sc2_X: return KeyCode::PS2_KEY_X;
				case KeyboardOutput::sc2_Y: return KeyCode::PS2_KEY_Y;
				case KeyboardOutput::sc2_Z: return KeyCode::PS2_KEY_Z;
				case KeyboardOutput::sc2_SEMI: return KeyCode::PS2_KEY_SEMI;
				case KeyboardOutput::sc2_BACK: return KeyCode::PS2_KEY_BACK;
				case KeyboardOutput::sc2_OPEN_SQ: return KeyCode::PS2_KEY_OPEN_SQ;
				case KeyboardOutput::sc2_CLOSE_SQ: return KeyCode::PS2_KEY_CLOSE_SQ;
				case KeyboardOutput::sc2_EQUAL: return KeyCode::PS2_KEY_EQUAL;
				case KeyboardOutput::sc2_EUROPE2: return KeyCode::PS2_KEY_EUROPE2;
				case KeyboardOutput::sc2_F1: return KeyCode::PS2_KEY_F1;
				case KeyboardOutput::sc2_F2: return KeyCode::PS2_KEY_F2;
				case KeyboardOutput::sc2_F3: return KeyCode::PS2_KEY_F3;
				case KeyboardOutput::sc2_F4: return KeyCode::PS2_KEY_F4;
				case KeyboardOutput::sc2_F5: return KeyCode::PS2_KEY_F5;
				case KeyboardOutput::sc2_F6: return KeyCode::PS2_KEY_F6;
				case KeyboardOutput::sc2_F7: return KeyCode::PS2_KEY_F7;
				case KeyboardOutput::sc2_F8: return KeyCode::PS2_KEY_F8;
				case KeyboardOutput::sc2_F9: return KeyCode::PS2_KEY_F9;
				case KeyboardOutput::sc2_F10: return KeyCode::PS2_KEY_F10;
				case KeyboardOutput::sc2_F11: return KeyCode::PS2_KEY_F11;
				case KeyboardOutput::sc2_F12: return KeyCode::PS2_KEY_F12;
				case KeyboardOutput::sc2_F13: return KeyCode::PS2_KEY_F13;
				case KeyboardOutput::sc2_F14: return KeyCode::PS2_KEY_F14;
				case KeyboardOutput::sc2_F15: return KeyCode::PS2_KEY_F15;
				case KeyboardOutput::sc2_F16: return KeyCode::PS2_KEY_F16;
				case KeyboardOutput::sc2_F17: return KeyCode::PS2_KEY_F17;
				case KeyboardOutput::sc2_F18: return KeyCode::PS2_KEY_F18;
				case KeyboardOutput::sc2_F19: return KeyCode::PS2_KEY_F19;
				case KeyboardOutput::sc2_F20: return KeyCode::PS2_KEY_F20;
				case KeyboardOutput::sc2_F21: return KeyCode::PS2_KEY_F21;
				case KeyboardOutput::sc2_F22: return KeyCode::PS2_KEY_F22;
				case KeyboardOutput::sc2_F23: return KeyCode::PS2_KEY_F23;
				case KeyboardOutput::sc2_F24: return KeyCode::PS2_KEY_F24;
				case KeyboardOutput::sc2_KP_COMMA: return KeyCode::PS2_KEY_KP_COMMA;
				case KeyboardOutput::sc2_INTL1: return KeyCode::PS2_KEY_INTL1;
				case KeyboardOutput::sc2_INTL2: return KeyCode::PS2_KEY_INTL2;
				case KeyboardOutput::sc2_INTL3: return KeyCode::PS2_KEY_INTL3;
				case KeyboardOutput::sc2_INTL4: return KeyCode::PS2_KEY_INTL4;
				case KeyboardOutput::sc2_INTL5: return KeyCode::PS2_KEY_INTL5;
				case KeyboardOutput::sc2_LANG1: return KeyCode::PS2_KEY_LANG1;
				case KeyboardOutput::sc2_LANG2: return KeyCode::PS2_KEY_LANG2;
				case KeyboardOutput::sc2_LANG3: return KeyCode::PS2_KEY_LANG3;
				case KeyboardOutput::sc2_LANG4: return KeyCode::PS2_KEY_LANG4;
				// case KeyboardOutput::sc2_LANG5: return KeyCode::PS2_KEY_LANG5;
				default: return (KeyCode)0;
			};
		}
		
		KeyCode translateExtended(KeyboardOutput inputCode)
		{
			switch (inputCode) {
				case KeyboardOutput::sc2_PRTSCR: return KeyCode::PS2_KEY_PRTSCR;
				case KeyboardOutput::sc2_CTRL: return KeyCode::PS2_KEY_R_CTRL;
				case KeyboardOutput::sc2_ALT: return KeyCode::PS2_KEY_R_ALT;
				case KeyboardOutput::sc2_L_GUI: return KeyCode::PS2_KEY_L_GUI;
				case KeyboardOutput::sc2_R_GUI: return KeyCode::PS2_KEY_R_GUI;
				case KeyboardOutput::sc2_MENU: return KeyCode::PS2_KEY_MENU;
				case KeyboardOutput::sc2_BREAK: return KeyCode::PS2_KEY_BREAK;
				case KeyboardOutput::sc2_HOME: return KeyCode::PS2_KEY_HOME;
				case KeyboardOutput::sc2_END: return KeyCode::PS2_KEY_END;
				case KeyboardOutput::sc2_PGUP: return KeyCode::PS2_KEY_PGUP;
				case KeyboardOutput::sc2_PGDN: return KeyCode::PS2_KEY_PGDN;
				case KeyboardOutput::sc2_L_ARROW: return KeyCode::PS2_KEY_L_ARROW;
				case KeyboardOutput::sc2_R_ARROW: return KeyCode::PS2_KEY_R_ARROW;
				case KeyboardOutput::sc2_UP_ARROW: return KeyCode::PS2_KEY_UP_ARROW;
				case KeyboardOutput::sc2_DN_ARROW: return KeyCode::PS2_KEY_DN_ARROW;
				case KeyboardOutput::sc2_INSERT: return KeyCode::PS2_KEY_INSERT;
				case KeyboardOutput::sc2_DELETE: return KeyCode::PS2_KEY_DELETE;
				case KeyboardOutput::sc2_KP_ENTER: return KeyCode::PS2_KEY_KP_ENTER;
				case KeyboardOutput::sc2_KP_DIV: return KeyCode::PS2_KEY_KP_DIV;
				case KeyboardOutput::sc2_NEXT_TR: return KeyCode::PS2_KEY_NEXT_TR;
				case KeyboardOutput::sc2_PREV_TR: return KeyCode::PS2_KEY_PREV_TR;
				case KeyboardOutput::sc2_STOP: return KeyCode::PS2_KEY_STOP;
				case KeyboardOutput::sc2_PLAY: return KeyCode::PS2_KEY_PLAY;
				case KeyboardOutput::sc2_MUTE: return KeyCode::PS2_KEY_MUTE;
				case KeyboardOutput::sc2_VOL_UP: return KeyCode::PS2_KEY_VOL_UP;
				case KeyboardOutput::sc2_VOL_DN: return KeyCode::PS2_KEY_VOL_DN;
				case KeyboardOutput::sc2_MEDIA: return KeyCode::PS2_KEY_MEDIA;
				case KeyboardOutput::sc2_EMAIL: return KeyCode::PS2_KEY_EMAIL;
				case KeyboardOutput::sc2_CALC: return KeyCode::PS2_KEY_CALC;
				case KeyboardOutput::sc2_COMPUTER: return KeyCode::PS2_KEY_COMPUTER;
				case KeyboardOutput::sc2_WEB_SEARCH: return KeyCode::PS2_KEY_WEB_SEARCH;
				case KeyboardOutput::sc2_WEB_HOME: return KeyCode::PS2_KEY_WEB_HOME;
				//case KeyboardOutput::sc2_WEB_BACK: return KeyCode::PS2_KEY_WEB_BACK;
				case KeyboardOutput::sc2_WEB_FORWARD: return KeyCode::PS2_KEY_WEB_FORWARD;
				case KeyboardOutput::sc2_WEB_STOP: return KeyCode::PS2_KEY_WEB_STOP;
				case KeyboardOutput::sc2_WEB_REFRESH: return KeyCode::PS2_KEY_WEB_REFRESH;
				case KeyboardOutput::sc2_WEB_FAVOR: return KeyCode::PS2_KEY_WEB_FAVOR;
				case KeyboardOutput::sc2_POWER: return KeyCode::PS2_KEY_POWER;
				case KeyboardOutput::sc2_SLEEP: return KeyCode::PS2_KEY_SLEEP;
				case KeyboardOutput::sc2_WAKE: return KeyCode::PS2_KEY_WAKE;
				default: return (KeyCode)0;
			}
		}
	};
}